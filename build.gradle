plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.8.0'
    implementation group: 'net.java.dev.jna', name: 'jna-platform', version: '5.8.0'
    implementation 'org.testng:testng:7.1.0'

    compile group: 'com.bloxbean.cardano', name: 'cardano-client-lib', version: '0.4.2'
    compile group: 'com.bloxbean.cardano', name: 'cardano-client-backend-blockfrost', version: '0.4.2'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
    testImplementation('org.assertj:assertj-core:3.23.1')
    testRuntimeOnly 'org.slf4j:slf4j-log4j12:1.7.36'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "native"
        }
    }
//    integrationTest {
//        java {
//            compileClasspath += main.output + test.output + configurations.testCompile
//            runtimeClasspath += main.output + test.output + compileClasspath + configurations.testRuntime
//            srcDir file('src/integration-test/java')
//        }
//        resources.srcDir file('src/integration-test/resources')
//    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.bloxbean.cardano.client.cli.CLIMain'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

//task integrationTest(type: Test) {
//    description = 'Runs the integration tests.'
//    group = LifecycleBasePlugin.VERIFICATION_GROUP
//    testClassesDirs = sourceSets.integrationTest.output.classesDirs
//    classpath = sourceSets.integrationTest.runtimeClasspath
//    outputs.upToDateWhen { false }
//    // mustRunAfter(tasks.named('test'))
//    systemProperty('BF_PROJECT_ID', findProperty("BF_PROJECT_ID"))
//    testLogging {
//        showStandardStreams = true
//    }
//}

//integrationTest {
//    useJUnitPlatform()
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            pom {
                name = 'Cardano Client Transaction Evaluator'
                description = 'Cardano Client Transaction Evaluator'
                url = 'https://github.com/bloxbean/cardano-client-tx-evaluator'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'satran004'
                        name = 'Satya'
                        email = 'satran004@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/bloxbean/cardano-client-tx-evaluator'
                    developerConnection = 'scm:git:ssh://git@github.com/bloxbean/cardano-client-tx-evaluator'
                    url = 'https://github.com/bloxbean/cardano-client-tx-evaluator'
                }
            }
        }
    }

    repositories {
        String ossrhUsername = System.getenv('MAVEN_USER')
        String ossrhPassword = System.getenv('MAVEN_PASSWORD')

        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (isReleaseVersion && !project.hasProperty("skipSigning")) {
    signing {
//        sign configurations.archives
        sign publishing.publications
    }
}

